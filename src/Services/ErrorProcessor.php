<?php

namespace Codexpedite\LaravelGithubIssues\Services;

class ErrorProcessor
{
    private array $config;
    private array $processedErrors = [];

    public function __construct(array $config)
    {
        $this->config = $config;
    }

    public function processLogEntry(string $logLine): ?array
    {
        if (!$this->shouldProcess($logLine)) {
            return null;
        }

        $errorData = $this->parseLogEntry($logLine);
        
        if (!$errorData || $this->isDuplicate($errorData)) {
            return null;
        }

        $this->markAsProcessed($errorData);

        return [
            'title' => $this->generateTitle($errorData),
            'body' => $this->generateBody($errorData),
            'labels' => $this->config['issue']['labels'] ?? [],
            'assignees' => $this->config['issue']['assignees'] ?? [],
        ];
    }

    private function shouldProcess(string $logLine): bool
    {
        $minLevel = $this->config['filters']['min_level'] ?? 'error';
        $excludePatterns = $this->config['filters']['exclude_patterns'] ?? [];

        if (!$this->isErrorLevel($logLine, $minLevel)) {
            return false;
        }

        foreach ($excludePatterns as $pattern) {
            if (strpos($logLine, $pattern) !== false) {
                return false;
            }
        }

        return true;
    }

    private function isErrorLevel(string $logLine, string $minLevel): bool
    {
        $levels = ['debug', 'info', 'notice', 'warning', 'error', 'critical', 'alert', 'emergency'];
        $minLevelIndex = array_search(strtolower($minLevel), $levels);
        
        foreach ($levels as $index => $level) {
            if ($index >= $minLevelIndex && stripos($logLine, ".$level:") !== false) {
                return true;
            }
        }

        return false;
    }

    private function parseLogEntry(string $logLine): ?array
    {
        preg_match('/\[(.*?)\]\s+(\w+)\.(\w+):\s+(.*?)(?:\s+\{.*\})?(?:\s+"[^"]*")?$/', $logLine, $matches);
        
        if (count($matches) < 5) {
            return null;
        }

        return [
            'timestamp' => $matches[1],
            'environment' => $matches[2],
            'level' => $matches[3],
            'message' => trim($matches[4]),
            'raw_line' => $logLine,
            'hash' => $this->generateErrorHash($matches[4]),
        ];
    }

    private function generateErrorHash(string $message): string
    {
        return md5(preg_replace('/\s+/', ' ', trim($message)));
    }

    private function isDuplicate(array $errorData): bool
    {
        $hash = $errorData['hash'];
        $timeout = $this->config['monitoring']['deduplicate_timeout'] ?? 3600;
        
        if (isset($this->processedErrors[$hash])) {
            $lastProcessed = $this->processedErrors[$hash];
            if ((time() - $lastProcessed) < $timeout) {
                return true;
            }
        }

        return false;
    }

    private function markAsProcessed(array $errorData): void
    {
        $this->processedErrors[$errorData['hash']] = time();
        
        if (count($this->processedErrors) > 1000) {
            $this->processedErrors = array_slice($this->processedErrors, -500, null, true);
        }
    }

    private function generateTitle(array $errorData): string
    {
        $prefix = $this->config['issue']['title_prefix'] ?? '[Auto] ';
        $message = $errorData['message'];
        
        $title = $prefix . substr($message, 0, 100);
        
        if (strlen($message) > 100) {
            $title .= '...';
        }

        return $title;
    }

    private function generateBody(array $errorData): string
    {
        $body = "## Error Details\n\n";
        $body .= "**Level:** {$errorData['level']}\n";
        $body .= "**Environment:** {$errorData['environment']}\n";
        $body .= "**Timestamp:** {$errorData['timestamp']}\n\n";
        $body .= "**Message:**\n```\n{$errorData['message']}\n```\n\n";
        
        if ($this->config['issue']['include_request_info'] ?? true) {
            $body .= "**Request Information:**\n";
            $body .= "- User Agent: " . ($_SERVER['HTTP_USER_AGENT'] ?? 'N/A') . "\n";
            $body .= "- IP Address: " . ($_SERVER['REMOTE_ADDR'] ?? 'N/A') . "\n";
            $body .= "- Request URI: " . ($_SERVER['REQUEST_URI'] ?? 'N/A') . "\n\n";
        }

        $body .= "**Raw Log Entry:**\n```\n{$errorData['raw_line']}\n```\n\n";
        $body .= "---\n*This issue was automatically generated by laravel-github-issues package.*";

        return $body;
    }
}